{
  "name": "assignment",
  "version": "1.0.0",
  "description": "Create an API using node js, express js, and MongoDB with the following structure ---\r Routes:\r /posts\r GET: to get posts (should be only available for logged-in users) (pass token via Authorization header.)\r POST: to create posts\r DELETE: to delete posts (should be only available for creators of post)\r PUT: to update posts (should be only available for creators of post)\r /users\r GET: to get users\r POST: to create users\r DELETE: to delete users\r PUT: to update users\r Schema --->\r posts - { createdBy: ObjectId(userId), createdAt, updatedAt, message, comments: [{ sentBy:\r ObjectId(userId), sentAt, liked: [ObjectId(userId)] }] }\r users - {name, email (unique), mobile, password(hashed) }\r When you get all posts you should also get user details in place of createdBy, comments: [{ sentBy }]\r and liked fields.\r Host your API on a free server and create a good postman collection for it. Then submit a response as:\r Github link, Heroku link, postman collection link.\r For authentication use only JWT tokens with Refresh Token System and Use Cache Like Redis, M\r Cache. Recommended Redis\r you Have to Store Refresh Token in Cache Memory and Host it to any Server.\r Keep Express App and Server Separate.",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.0",
    "body-parser": "^1.20.2",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.3",
    "nodemon": "^2.0.22",
    "redis": "^4.6.5",
    "uuid": "^9.0.0"
  }
}
